#include <cstdlib>
#include <stdlib.h>
#include <sstream>
#include <cstring>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/stat.h>
#include <cerrno>
#include <iostream>
#include <fstream>
#include <sys/wait.h>
#include <string>
#include <cstring>
#include <vector>
using namespace std;

bool fileExists(const char* filePath)
{
	struct stat fileAttribute;
	if(stat(filePath, &fileAttribute) != 0)
		perror(filePath);
	return S_ISREG(fileAttribute.st_mode);
}

bool dirExists(const char* filePath)
{
	struct stat fileAttribute;
	if(stat(filePath, &fileAttribute) != 0)
		perror(filePath);
	return S_ISDIR(fileAttribute.st_mode);
}

int main(int argc, char* argv[], char **envp)
{
	char* env = getenv("PATH");
	char* home = getenv("HOME");
	setenv("PATH", env, 1);
	string command;
	char* cur;
	while(getline(cin, command))
	{
		cur=getenv("PWD");
		cout<<cur<<"> ";
		if(command == "quit" || command=="exit")
			exit(0);
		if(command =="HOME")
			cout<<getenv("HOME")<<'\n';
		if(command == "PATH")
			cout<<getenv("PATH")<<'\n';
		int white;
		for(int i =0;i < command.length();i++)
		{
			if(isspace(command.at(i))){
				white = i;
				break;
			}
		} 
		string op=command.substr(white+1);
		if(command == "cd"){
			if(command.size()==2)
				setenv("PWD", getenv("HOME"), 1);
			else if(command.size()>=2){
				if(dirExists(op.c_str()))
					setenv("PWD", op.c_str(), 1);
		}
		if(command=="jobs"){
			
		}
		if(command.substr(0, white)=="set"){
			string path = op.substr(5);
			if(strncmp(op.c_str(), "HOME=", 5)==0){
				if(dirExists(path.c_str()))
					setenv("HOME", path.c_str(), 1);
			}
			else if(strncmp(op.c_str(), "PATH=", 5)==0){
				size_t colon = path.find(':');
				size_t prevcolon = 0;
				string check;
				string buf=path;
				if(colon==string::npos){
					if(dirExists(path.c_str()))
						setenv("PATH", path.c_str(), 1);
				}
				while(colon!=string::npos)
				{
					check=buf.substr(prevcolon, colon);
					buf=path.substr(path.find(check));
					if(!dirExists(check.c_str())){
						path.erase(prevcolon, colon);
						buf.erase(0, colon);
					}
					colon=buf.find(':');
					prevcolon=path.find(buf);
				}
			}
		}
	}
}
